// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package novelpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NovelClient is the client API for Novel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NovelClient interface {
	GetNovelById(ctx context.Context, in *NovelIdRequest, opts ...grpc.CallOption) (*NovelIdResponse, error)
}

type novelClient struct {
	cc grpc.ClientConnInterface
}

func NewNovelClient(cc grpc.ClientConnInterface) NovelClient {
	return &novelClient{cc}
}

func (c *novelClient) GetNovelById(ctx context.Context, in *NovelIdRequest, opts ...grpc.CallOption) (*NovelIdResponse, error) {
	out := new(NovelIdResponse)
	err := c.cc.Invoke(ctx, "/novel.Novel/GetNovelById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovelServer is the server API for Novel service.
// All implementations must embed UnimplementedNovelServer
// for forward compatibility
type NovelServer interface {
	GetNovelById(context.Context, *NovelIdRequest) (*NovelIdResponse, error)
	mustEmbedUnimplementedNovelServer()
}

// UnimplementedNovelServer must be embedded to have forward compatible implementations.
type UnimplementedNovelServer struct {
}

func (UnimplementedNovelServer) GetNovelById(context.Context, *NovelIdRequest) (*NovelIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovelById not implemented")
}
func (UnimplementedNovelServer) mustEmbedUnimplementedNovelServer() {}

// UnsafeNovelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NovelServer will
// result in compilation errors.
type UnsafeNovelServer interface {
	mustEmbedUnimplementedNovelServer()
}

func RegisterNovelServer(s grpc.ServiceRegistrar, srv NovelServer) {
	s.RegisterService(&Novel_ServiceDesc, srv)
}

func _Novel_GetNovelById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServer).GetNovelById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novel.Novel/GetNovelById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServer).GetNovelById(ctx, req.(*NovelIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Novel_ServiceDesc is the grpc.ServiceDesc for Novel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Novel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "novel.Novel",
	HandlerType: (*NovelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNovelById",
			Handler:    _Novel_GetNovelById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "novel.proto",
}
